<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <maskName>&lt;undefined&gt;</maskName>
  <parentName>&lt;undefined&gt;</parentName>
  <events>
    <event enumb="0" eventtype="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// PARENT OBJ - Init button state &amp; vars&#13;
/*&#13;
	GUI Button Object that uses scr_DrawWin &amp; Font for display&#13;
	Parent this to a sprite-less child object.&#13;
*/&#13;
&#13;
// set color to full white&#13;
self.image_blend = make_color_rgb(128,128,128);&#13;
//buttons act like a linked-list&#13;
self.oprevbtn = noone;&#13;
self.onextbtn = noone;&#13;
// when the accept key or button is pressed for this button, this is set to true&#13;
self.perform_accept = false;&#13;
// stuff&#13;
self.text = "";&#13;
self._oldtext = "none"; // if text != _oldtext, then step will re-calculate the size&#13;
// calculate size based off text, number is number of tiles w &amp; h&#13;
self.win_w = 0;&#13;
self.win_h = 0;&#13;
self.win_tile_size = 16;&#13;
self.win_spr = spr_win;&#13;
self.win_font = font0;&#13;
// state of button, if 0 we do normal button operations, all other states defined&#13;
// will allow derived buttons to check for that state and do specific operations for it.&#13;
self.state_normal = 0;&#13;
self.state_edit = 1;&#13;
self.state = self.state_normal;&#13;
self.ballowedit = false;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event enumb="0" eventtype="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(self.text != self._oldtext)&#13;
{&#13;
	draw_set_font(self.win_font);&#13;
	self.win_w = ceil(string_width(self.text) / self.win_tile_size);&#13;
	self.win_h = ceil(string_height(self.text) / self.win_tile_size);&#13;
	self._oldtext = self.text;&#13;
}&#13;
&#13;
if(autoxmargin)&#13;
{&#13;
	&#13;
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event enumb="0" eventtype="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw the window using the tiled method&#13;
scr_DrawWin(self.win_spr, self.win_tile_size, self.x, self.y, self.win_w , self.win_h);&#13;
// must set to font to get accurate numbers&#13;
draw_set_font(self.win_font);&#13;
// calculate the y offset position for the text (centered)&#13;
_yofs = ((self.win_h * self.win_tile_size)/2)-(string_height(self.text)/2);&#13;
// calculate the x offset position for the text (centered as well)&#13;
_xx = ((self.win_tile_size*(self.win_w)) / 2) - (string_width(self.text)/2);&#13;
draw_text(self.x+_xx,self.y + _yofs, self.text);</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.1</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.1</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.1</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.2</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
