<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<object>
  <spriteName>spr_p1</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>-1</persistent>
  <maskName>&lt;undefined&gt;</maskName>
  <parentName>&lt;undefined&gt;</parentName>
  <events>
    <event enumb="0" eventtype="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup Player Stats &amp; Etc&#13;
self.image_speed = 0;&#13;
self.maxhp = 3;&#13;
self.hp = self.maxhp;&#13;
self.bonwater = false;&#13;
self.bwtf = false;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event enumb="0" eventtype="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement Input&#13;
&#13;
// Determine the correct player sprite to draw (dead, on a water object, etc)&#13;
self.image_index = (self.hp&lt;=0) ? 2 : (self.bonwater ? 1 : 0);&#13;
&#13;
// Relinquish player controls if the death scene is active.&#13;
global.bdeathscene = (self.hp &lt;= 0);&#13;
if(global.bdeathscene==true)&#13;
	return 0;&#13;
	&#13;
// don't let the player move if a sign is open&#13;
if(global.bsignopen==true)&#13;
	return 0;&#13;
	&#13;
if(visible) {&#13;
&#13;
	if ( keyboard_check_pressed(global.key_up) )&#13;
	{&#13;
		//if (y &gt; 0) &#13;
		{&#13;
			ny = y - 16;&#13;
			inst = instance_place(x, ny, all);&#13;
			if(inst!=noone)&#13;
			{&#13;
				switch(inst.object_index)&#13;
				{&#13;
					case obj_rock:&#13;
						instance_destroy(inst);&#13;
						break;&#13;
					case obj_blockall:&#13;
						break;&#13;
					case obj_firstsign:&#13;
						inst.bshowsign = true;&#13;
						break;&#13;
					case obj_desk:&#13;
						break;&#13;
					default:&#13;
						y = ny;&#13;
				}&#13;
			}&#13;
			else &#13;
				y = ny;&#13;
		}&#13;
	}&#13;
	&#13;
	if ( keyboard_check_pressed(global.key_down) )&#13;
	{&#13;
		//if (y &lt; (240))&#13;
		{&#13;
			ny = y + 16;&#13;
			inst = instance_place(x, ny, all);&#13;
			if(inst!=noone)&#13;
			{&#13;
				switch(inst.object_index)&#13;
				{&#13;
					case obj_rock:&#13;
						instance_destroy(inst);&#13;
						break;&#13;
					case obj_blockall:&#13;
						break;&#13;
					case obj_firstsign:&#13;
						inst.bshowsign = true;&#13;
						break;&#13;
					case obj_desk:&#13;
						break;						&#13;
					default:&#13;
						y = ny;&#13;
				}&#13;
			}&#13;
			else &#13;
				y = ny;&#13;
		}&#13;
	}&#13;
	&#13;
	if ( keyboard_check_pressed(global.key_left) )&#13;
	{&#13;
		//if (x &gt;= 16) &#13;
		{&#13;
			nx = x - 16;&#13;
			inst = instance_place(nx, y, all);&#13;
			if(inst!=noone)&#13;
			{&#13;
				switch(inst.object_index)&#13;
				{&#13;
					case obj_rock:&#13;
						instance_destroy(inst);&#13;
						break;&#13;
					case obj_blockall:&#13;
						break;&#13;
					case obj_firstsign:&#13;
						inst.bshowsign = true;&#13;
						break;&#13;
					case obj_desk:&#13;
						break;						&#13;
					default:&#13;
						x = nx;&#13;
				}&#13;
			}&#13;
			else &#13;
				x = nx;&#13;
		}&#13;
	}&#13;
	&#13;
	if ( keyboard_check_pressed(global.key_right) )&#13;
	{&#13;
		//if (x &lt; (320))&#13;
		{&#13;
			nx = x + 16;&#13;
			inst = instance_place(nx, y, all);&#13;
			if(inst!=noone)&#13;
			{&#13;
				switch(inst.object_index)&#13;
				{&#13;
					case obj_rock:&#13;
						instance_destroy(inst);&#13;
						break;&#13;
					case obj_blockall:&#13;
						break;&#13;
					case obj_firstsign:&#13;
						inst.bshowsign = true;&#13;
						break;&#13;
					case obj_desk:&#13;
						break;						&#13;
					default:&#13;
						x = nx;&#13;
				}&#13;
			}&#13;
			else &#13;
				x = nx;&#13;
		}&#13;
	}&#13;
}&#13;
	&#13;
// special-case, force x and y boundary inside rm_mine&#13;
if(room==rm_mine)&#13;
{&#13;
	x = x &lt; 0 ? 0 : x;&#13;
	x = x &gt; 320-16 ? 320-16 : x;&#13;
	y = y &lt; 32 ? 32 : y;&#13;
	y = y &gt; 240-48 ? 240-48 : y;&#13;
}&#13;
&#13;
// update water status&#13;
global.oplayer.bonwater = false;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event ename="obj_water" eventtype="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// let the player object know it's on a water object, avoids a collision check&#13;
global.oplayer.bonwater = true;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event enumb="64" eventtype="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_set_gui_size(320,240); // has to be called per GUI draw event&#13;
&#13;
for(i = 0; i &lt; self.maxhp; ++i)&#13;
{&#13;
	if (i &lt; self.hp)&#13;
		draw_sprite(spr_heart, 0, 6 + (i*18), 6);&#13;
	else&#13;
		draw_sprite(spr_heart, 1, 6 + (i*18), 6);&#13;
}&#13;
&#13;
draw_set_font(font_0);&#13;
if (self.bwtf==true) draw_text(100, 1, "bwtf!");</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.1</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.1</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.1</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.2</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
